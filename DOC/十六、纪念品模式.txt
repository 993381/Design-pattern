<h1 id="_label0">1 Memento</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>
<span class="hljs-meta">#include &lt;string&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">string</span>;
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Originator</span>;</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">private</span>:&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">//将Originatord声明为friend类,可以访问内部信息,但是其他类不能访问</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">friend</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Originator</span>;</span>
&nbsp; &nbsp; &nbsp; &nbsp; Memento(){}
&nbsp; &nbsp; &nbsp; &nbsp; Memento(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;sdt){_sdt = sdt;}
&nbsp; &nbsp; &nbsp; &nbsp; ~Memento(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetState</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; sdt)</span></span>{_sdt = sdt;}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">GetState</span><span class="hljs-params">()</span></span>{<span class="hljs-keyword">return</span> _sdt;}
&nbsp; &nbsp; <span class="hljs-keyword">private</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">string</span> _sdt;
};

<span class="hljs-comment">// 负责创建一个备忘录Memento，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Originator</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Originator() {_sdt = <span class="hljs-string">""</span>; _mt = <span class="hljs-literal">NULL</span>;}
&nbsp; &nbsp; &nbsp; &nbsp; Originator(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span> &amp;sdt) {_sdt = sdt; _mt = <span class="hljs-literal">NULL</span>;}
&nbsp; &nbsp; &nbsp; &nbsp; ~Originator();
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function">Memento *<span class="hljs-title">CreateMemento</span><span class="hljs-params">()</span></span>{<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Memento(_sdt);}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetMemento</span><span class="hljs-params">(Memento *men)</span></span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">RestoreToMemento</span><span class="hljs-params">(Memento* mt)</span></span>{<span class="hljs-keyword">this</span>-&gt;_sdt = mt-&gt;GetState();}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">GetState</span><span class="hljs-params">()</span></span>{<span class="hljs-keyword">return</span> _sdt;}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetState</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-built_in">string</span>&amp; sdt)</span> </span>{_sdt = sdt;}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintState</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"State:"</span>&lt;&lt;<span class="hljs-keyword">this</span>-&gt;_sdt&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; <span class="hljs-keyword">private</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">string</span> _sdt;
&nbsp; &nbsp; &nbsp; &nbsp; Memento *_mt;
};

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
&nbsp; &nbsp; Originator *ogn = <span class="hljs-keyword">new</span> Originator();
&nbsp; &nbsp; <span class="hljs-comment">//初始化对象，状态为“Old”</span>
&nbsp; &nbsp; ogn-&gt;SetState(<span class="hljs-string">"old"</span>);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//备忘前状态&nbsp;</span>
&nbsp; &nbsp; ogn-&gt;PrintState();
&nbsp; &nbsp; Memento* mt = ogn-&gt;CreateMemento(); <span class="hljs-comment">//将状态备忘</span>
&nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"&nbsp; &nbsp; change state:"</span>;
&nbsp; &nbsp; ogn-&gt;SetState(<span class="hljs-string">"new"</span>);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//修改状态</span>
&nbsp; &nbsp; ogn-&gt;PrintState();
&nbsp; &nbsp; ogn-&gt;RestoreToMemento(mt);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">//恢复修改前状态</span>
&nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"&nbsp; &nbsp; restore state:"</span>;
&nbsp; &nbsp; ogn-&gt;PrintState();

&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre>