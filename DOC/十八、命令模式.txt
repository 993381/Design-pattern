<h1 id="_label0">1 Command</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>
<span class="hljs-comment">// https://www.cnblogs.com/jiese/p/3190414.html</span>
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Command</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">virtual</span> ~Command(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Command(){}
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receiver</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Receiver(){}
&nbsp; &nbsp; &nbsp; &nbsp; ~Receiver(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Action</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">"Receiver::Action"</span> &lt;&lt; <span class="hljs-built_in">endl</span>;}
};
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteCommand</span> :</span> <span class="hljs-keyword">public</span> Command
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteCommand(Receiver* pReceiver){<span class="hljs-keyword">this</span>-&gt;_recv = pReceiver;}
&nbsp; &nbsp; &nbsp; &nbsp; ~ConcreteCommand(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Execute</span><span class="hljs-params">()</span></span>{<span class="hljs-keyword">this</span>-&gt;_recv-&gt;Action();}
&nbsp; &nbsp; <span class="hljs-keyword">private</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Receiver* _recv;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoker</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Invoker(Command* pCommand){<span class="hljs-keyword">this</span>-&gt;_cmd = pCommand;}
&nbsp; &nbsp; &nbsp; &nbsp; ~Invoker(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Invoke</span><span class="hljs-params">()</span></span>{<span class="hljs-keyword">this</span>-&gt;_cmd-&gt;Execute();}
&nbsp; &nbsp; <span class="hljs-keyword">private</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Command* _cmd;
};

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
&nbsp; &nbsp; <span class="hljs-comment">//创建具体命令对象pCmd并设定它的接收者pRev</span>
&nbsp; &nbsp; Receiver* pRev = <span class="hljs-keyword">new</span> Receiver();
&nbsp; &nbsp; Command* pCmd = <span class="hljs-keyword">new</span> ConcreteCommand(pRev);
&nbsp; &nbsp; <span class="hljs-comment">//请求绑定命令</span>
&nbsp; &nbsp; Invoker* pInv = <span class="hljs-keyword">new</span> Invoker(pCmd);
&nbsp; &nbsp; pInv-&gt;Invoke();

&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre>