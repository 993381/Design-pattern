<h1 id="_label0">1 Visitor</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteElementA</span>;</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteElementB</span>;</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Element</span>;</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visitor</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">virtual</span> ~Visitor(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">VisitConcreteElementA</span><span class="hljs-params">(Element *elm)</span> </span>= <span class="hljs-number">0</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">VisitConcreteElementB</span><span class="hljs-params">(Element *elm)</span> </span>= <span class="hljs-number">0</span>;
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Visitor(){}
};
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteVisitorA</span> :</span> <span class="hljs-keyword">public</span> Visitor
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteVisitorA(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">virtual</span> ~ConcreteVisitorA(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">VisitConcreteElementA</span><span class="hljs-params">(Element *elm)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Visit ConcreteVisitorA :: ConcreteElementA()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">VisitConcreteElementB</span><span class="hljs-params">(Element *elm)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Visit ConcreteVisitorA :: ConcreteElementB()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; &nbsp; &nbsp; }
};
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteVisitorB</span> :</span> <span class="hljs-keyword">public</span> Visitor
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteVisitorB(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">virtual</span> ~ConcreteVisitorB(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">VisitConcreteElementA</span><span class="hljs-params">(Element *elm)</span></span>{

&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Visit ConcreteVisitorB :: ConcreteElementA()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">VisitConcreteElementB</span><span class="hljs-params">(Element *elm)</span></span>{

&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Visit ConcreteVisitorB :: ConcreteElementB()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; }
};

<span class="hljs-comment">// element</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Visitor</span>;</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Element</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">virtual</span> ~Element(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Accept</span><span class="hljs-params">(Visitor *vis)</span> </span>= <span class="hljs-number">0</span>;
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Element(){}
};

<span class="hljs-keyword">void</span> Element::Accept(Visitor *vis)
{
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteElementA</span> :</span> <span class="hljs-keyword">public</span> Element
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteElementA(){}
&nbsp; &nbsp; &nbsp; &nbsp; ~ConcreteElementA(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Accept</span><span class="hljs-params">(Visitor *vis)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vis-&gt;VisitConcreteElementA(<span class="hljs-keyword">this</span>);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Visiting ConcreteElementA()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; &nbsp; &nbsp; }
};
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteElementB</span> :</span> <span class="hljs-keyword">public</span> Element
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteElementB(){}
&nbsp; &nbsp; &nbsp; &nbsp; ~ConcreteElementB(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Accept</span><span class="hljs-params">(Visitor *vis)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; vis-&gt;VisitConcreteElementB(<span class="hljs-keyword">this</span>);
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Visiting ConcreteElementB()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;&nbsp;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; }
};


<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
&nbsp; &nbsp; Visitor *visA = <span class="hljs-keyword">new</span> ConcreteVisitorA();
&nbsp; &nbsp; Element *elmA = <span class="hljs-keyword">new</span> ConcreteElementA();
&nbsp; &nbsp; elmA-&gt;Accept(visA);

&nbsp; &nbsp; Visitor *visB = <span class="hljs-keyword">new</span> ConcreteVisitorB();
&nbsp; &nbsp; Element *elmB = <span class="hljs-keyword">new</span> ConcreteElementB();
&nbsp; &nbsp; elmB-&gt;Accept(visB);

&nbsp; &nbsp; <span class="hljs-keyword">delete</span> elmA;
&nbsp; &nbsp; <span class="hljs-keyword">delete</span> visA;
&nbsp; &nbsp; <span class="hljs-keyword">delete</span> elmB;
&nbsp; &nbsp; <span class="hljs-keyword">delete</span> visB;
&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre>