<h1 id="_label0">1 Template</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;

<span class="hljs-comment">//抽象模板，并定义了一个模板方法</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractClass</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">virtual</span> ~AbstractClass() { <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"~AbstractClass"</span>&lt;&lt;<span class="hljs-built_in">endl</span>; }&nbsp; <span class="hljs-comment">//具体的模板方法，给出了逻辑的骨架，</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">TemplateMethod</span><span class="hljs-params">()</span> </span>{&nbsp; &nbsp; &nbsp; <span class="hljs-comment">//而逻辑的组成是一些相应的抽象操作，它们都推迟到子类中实现</span>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">this</span>-&gt;PrimitiveOperationA();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">this</span>-&gt;PrimitiveOperationB();
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">//一些抽象行为，放到子类中去实现</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrimitiveOperationA</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">PrimitiveOperationB</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;
&nbsp; &nbsp; &nbsp; &nbsp; AbstractClass() { <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"+AbstractClass"</span>&lt;&lt;<span class="hljs-built_in">endl</span>; }
};

<span class="hljs-keyword">void</span> AbstractClass :: PrimitiveOperationA(){
&nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"AbstractClass :: PrimitiveOperationA()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
}&nbsp;

<span class="hljs-keyword">void</span> AbstractClass :: PrimitiveOperationB(){
&nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"AbstractClass :: PrimitiveOperationB()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
}&nbsp;

<span class="hljs-comment">//实现基类所定义的抽象方法</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteClassA</span> :</span> <span class="hljs-keyword">public</span> AbstractClass
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteClassA() {<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"+ConcreteClassA"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; &nbsp; &nbsp; ~ConcreteClassA(){<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"~ConcreteClassA"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">//实现基类定义的抽象行为&nbsp; &nbsp; &nbsp; &nbsp;</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrimitiveOperationA</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"ConcreteClassA :: PrimitiveOperationA()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrimitiveOperationB</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"ConcreteClassA :: PrimitiveOperationB()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
};
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteClassB</span> :</span> <span class="hljs-keyword">public</span> AbstractClass
{
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; ConcreteClassB() {<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"+ConcreteClassB"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; &nbsp; &nbsp; ~ConcreteClassB(){<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"~ConcreteClassB"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">//实现基类定义的抽象行为</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrimitiveOperationA</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"ConcreteClassB :: PrimitiveOperationA()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrimitiveOperationB</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"ConcreteClassB :: PrimitiveOperationB()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
};

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
&nbsp; &nbsp; <span class="hljs-comment">//ConcreteClassA与ConcreteClassB可相互替换</span>
&nbsp; &nbsp; AbstractClass *p1 = <span class="hljs-keyword">new</span> ConcreteClassA();
&nbsp; &nbsp; AbstractClass *p2 = <span class="hljs-keyword">new</span> ConcreteClassB();
&nbsp; &nbsp; p1-&gt;TemplateMethod();
&nbsp; &nbsp; p2-&gt;TemplateMethod();

&nbsp; &nbsp; <span class="hljs-keyword">delete</span> p1;
&nbsp; &nbsp; <span class="hljs-keyword">delete</span> p2;
&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre>