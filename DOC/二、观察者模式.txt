<h1 id="_label0">概述：</h1><pre class="ql-syntax" spellcheck="false">定义一个一对多的依赖关系，使得每当一个对象改变状态，则所有依赖它的对象都会得到通知并被自动更新，又叫订阅模式。
北京时间一动，其它的表跟着动。该例子是传统方法实现的一个动，其它的跟着动。
</pre><h1 id="_label1">传统方法的示例：</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span>{</span>
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; _x=x;
&nbsp; &nbsp; &nbsp; &nbsp; _x+=<span class="hljs-number">10</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"B:"</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _x;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span>{</span>
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; _x=x;
&nbsp; &nbsp; &nbsp; &nbsp; _x+=<span class="hljs-number">20</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"C:"</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _x;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span>{</span>
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; _x=x;
&nbsp; &nbsp; &nbsp; &nbsp; _x+=<span class="hljs-number">30</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"D:"</span>&lt;&lt;_x&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _x;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span>{</span>
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(B *pb,C *pc,D *pd,<span class="hljs-keyword">int</span> x)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; _x=x;
&nbsp; &nbsp; &nbsp; &nbsp; pb-&gt;update(_x);
&nbsp; &nbsp; &nbsp; &nbsp; pc-&gt;update(_x);
&nbsp; &nbsp; &nbsp; &nbsp; pd-&gt;update(_x);
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _x;
};

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; B b; C c; D d;
&nbsp; &nbsp; A a;
&nbsp; &nbsp; a.update(&amp;b,&amp;c,&amp;d,<span class="hljs-number">20</span>);
&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre><h1 id="_label2">观察者模式的示例：</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>
<span class="hljs-meta">#include &lt;list&gt;</span>
<span class="hljs-meta">#include &lt;algorithm&gt;</span>

<span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> <span class="hljs-built_in">std</span>;

<span class="hljs-comment">// 相比传统方法，可以取消订阅者，比较灵活。符合：对扩展开放，对修改关闭。</span>
<span class="hljs-comment">// 关键之处：list&lt;Observer *&gt;</span>

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Observer</span>{</span>
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hour,<span class="hljs-keyword">int</span> min,<span class="hljs-keyword">int</span> sec)</span></span>=<span class="hljs-number">0</span>;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subject</span>{</span>&nbsp; &nbsp; &nbsp;                      <span class="hljs-comment">//这些虚函数在PekingTimeSubject里面覆写</span>
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer *ob)</span></span>=<span class="hljs-number">0</span>;
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer *ob)</span></span>=<span class="hljs-number">0</span>;
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span>=<span class="hljs-number">0</span>;
<span class="hljs-keyword">protected</span>:
&nbsp; &nbsp; <span class="hljs-built_in">list</span>&lt;Observer *&gt; observerList;&nbsp; &nbsp; &nbsp;  <span class="hljs-comment">// 观察者列表</span>
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PekingTimeSubject</span>:</span><span class="hljs-keyword">public</span> Subject{
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setTimer</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hour,<span class="hljs-keyword">int</span> min,<span class="hljs-keyword">int</span> sec)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; _hour=hour;
&nbsp; &nbsp; &nbsp; &nbsp; _min=min;
&nbsp; &nbsp; &nbsp; &nbsp; _sec=sec;
&nbsp; &nbsp; &nbsp; &nbsp; notify();
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">registerObserver</span><span class="hljs-params">(Observer *ob)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; observerList.push_back(ob);
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">removeObserver</span><span class="hljs-params">(Observer *ob)</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; observerList.remove(ob);&nbsp; &nbsp; &nbsp; &nbsp;  <span class="hljs-comment">// lsit的remove方法</span>
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">notify</span><span class="hljs-params">()</span></span>{&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  <span class="hljs-comment">// 此函数必须在子类中实现，因为要接触数据。</span>
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">list</span>&lt;Observer *&gt; :: iterator itr =observerList.begin();
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">for</span>(;itr != observerList.end();itr++){
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; (*itr)-&gt;update(_hour,_min,_sec);
&nbsp; &nbsp; &nbsp; &nbsp; }&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  &nbsp;<span class="hljs-comment">// 遍历list去进行挨个通知</span>
&nbsp; &nbsp; }
<span class="hljs-keyword">private</span>:
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _hour;
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _min;
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _sec;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AmericaTimerObserver</span>:</span><span class="hljs-keyword">public</span> Observer{
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hour,<span class="hljs-keyword">int</span> min,<span class="hljs-keyword">int</span> sec)</span></span>{&nbsp; &nbsp; <span class="hljs-comment">//覆写update方法</span>
&nbsp; &nbsp; &nbsp; &nbsp; _hour=hour;
&nbsp; &nbsp; &nbsp; &nbsp; _min=min;
&nbsp; &nbsp; &nbsp; &nbsp; _sec=sec;
&nbsp; &nbsp; &nbsp; &nbsp; dis();
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dis</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"America Time is update"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"H:"</span>&lt;&lt;_hour&lt;&lt;<span class="hljs-string">" M:"</span>&lt;&lt;_min&lt;&lt;<span class="hljs-string">" S:"</span>&lt;&lt;_sec&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; }
<span class="hljs-keyword">private</span>:
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _hour;
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _min;
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _sec;
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JapanTimerObserver</span>:</span><span class="hljs-keyword">public</span> Observer{
<span class="hljs-keyword">public</span>:
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-keyword">int</span> hour,<span class="hljs-keyword">int</span> min,<span class="hljs-keyword">int</span> sec)</span></span>{&nbsp; &nbsp; <span class="hljs-comment">//覆写update</span>
&nbsp; &nbsp; &nbsp; &nbsp; _hour=hour;
&nbsp; &nbsp; &nbsp; &nbsp; _min=min;
&nbsp; &nbsp; &nbsp; &nbsp; _sec=sec;
&nbsp; &nbsp; &nbsp; &nbsp; dis();
&nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dis</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Japan Time is update"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"H:"</span>&lt;&lt;_hour&lt;&lt;<span class="hljs-string">" M:"</span>&lt;&lt;_min&lt;&lt;<span class="hljs-string">" S:"</span>&lt;&lt;_sec&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; }
<span class="hljs-keyword">private</span>:
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _hour;
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _min;
&nbsp; &nbsp; <span class="hljs-keyword">int</span> _sec;
};

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; PekingTimeSubject *bj = <span class="hljs-keyword">new</span> PekingTimeSubject;&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// 北京时间</span>
&nbsp; &nbsp; JapanTimerObserver *jp = <span class="hljs-keyword">new</span> JapanTimerObserver;&nbsp; &nbsp; &nbsp; <span class="hljs-comment">// 东京时间</span>
&nbsp; &nbsp; AmericaTimerObserver *am = <span class="hljs-keyword">new</span> AmericaTimerObserver;&nbsp; <span class="hljs-comment">// 美国时间</span>
&nbsp; &nbsp; bj-&gt;registerObserver(jp);&nbsp; &nbsp; &nbsp;<span class="hljs-comment">// bj就是被观察者，要把观察者都注册进去</span>
&nbsp; &nbsp; bj-&gt;registerObserver(am);&nbsp; &nbsp; &nbsp;<span class="hljs-comment">// 注意这里使用北京时间来作为联动flag</span>

&nbsp; &nbsp; bj-&gt;setTimer(<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">// 同时设置东京时间和美国时间</span>
&nbsp; &nbsp; bj-&gt;removeObserver(jp);&nbsp; &nbsp; &nbsp; &nbsp;<span class="hljs-comment">// 移除东京时间</span>
&nbsp; &nbsp; bj-&gt;setTimer(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-comment">// 此时的时间设置只会对美国时间有效</span>
&nbsp; &nbsp; <span class="hljs-comment">// 继承subject的才可以register，jp、am不可register。</span>
&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre>