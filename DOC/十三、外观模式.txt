<h1 id="_label0">1 Facade</h1><pre class="ql-syntax" spellcheck="false"><span class="hljs-meta">#include &lt;iostream&gt;</span>
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">cout</span>;
<span class="hljs-keyword">using</span> <span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subsystem1</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Subsystem1(){}
&nbsp; &nbsp; &nbsp; &nbsp; ~Subsystem1(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Subsystem1 :: Operation()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Subsystem2</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Subsystem2(){}
&nbsp; &nbsp; &nbsp; &nbsp; ~Subsystem2(){}
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Operation</span><span class="hljs-params">()</span></span>{<span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Subsystem2 :: Operation()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;}
};

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Facade</span>
{</span>
&nbsp; &nbsp; <span class="hljs-keyword">public</span>:
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">static</span> Facade *<span class="hljs-title">GetInstance</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (!_instance)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _instance = <span class="hljs-keyword">new</span> Facade();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">return</span> _instance;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">CloseInstance</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (_instance)
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">delete</span> _instance;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">OperationWrapper</span><span class="hljs-params">()</span></span>{
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-built_in">cout</span>&lt;&lt;<span class="hljs-string">"Facade :: OperationWrapper()"</span>&lt;&lt;<span class="hljs-built_in">endl</span>;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _subs1-&gt;Operation();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _subs2-&gt;Operation();
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">protected</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Facade(){
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _subs1 = <span class="hljs-keyword">new</span> Subsystem1();
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _subs2 = <span class="hljs-keyword">new</span> Subsystem2();
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; &nbsp; &nbsp; ~Facade(){
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (_subs1) <span class="hljs-keyword">delete</span> _subs1;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">if</span> (_subs2) <span class="hljs-keyword">delete</span> _subs2;
&nbsp; &nbsp; &nbsp; &nbsp; }
&nbsp; &nbsp; <span class="hljs-keyword">private</span>:
&nbsp; &nbsp; &nbsp; &nbsp; Subsystem1* _subs1;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; Subsystem2* _subs2;&nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; <span class="hljs-keyword">static</span> Facade* _instance;
};

Facade* Facade::_instance = <span class="hljs-literal">NULL</span>;

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>
</span>{
&nbsp; &nbsp; Facade *fd = Facade::GetInstance();
&nbsp; &nbsp; fd-&gt;OperationWrapper();

&nbsp; &nbsp; Facade::CloseInstance();
&nbsp; &nbsp; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</pre>